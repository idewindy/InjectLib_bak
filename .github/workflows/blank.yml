name: Sync Releases from Upstream (Simple Version)

on:
  schedule:
    # 每天检查一次
    - cron: '0 8 * * *'
  workflow_dispatch:  # 允许手动触发

jobs:
  sync-releases:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Sync releases
      run: |
        # 设置仓库信息
        UPSTREAM_REPO="LanYunDev/InjectLib_bak"
        FORK_REPO="$GITHUB_REPOSITORY"
        
        echo "正在同步 $UPSTREAM_REPO 到 $FORK_REPO"
        
        # 添加upstream并获取tags
        git remote add upstream https://github.com/$UPSTREAM_REPO.git
        git fetch upstream --tags
        git push origin --tags
        
        # 获取最新release信息
        LATEST_TAG=$(gh release list --repo $UPSTREAM_REPO --limit 1 --json tagName --jq '.[0].tagName')
        
        if [ "$LATEST_TAG" = "null" ] || [ -z "$LATEST_TAG" ]; then
          echo "没有找到releases"
          exit 0
        fi
        
        echo "最新release: $LATEST_TAG"
        
        # 检查是否已存在
        if gh release view "$LATEST_TAG" --repo $FORK_REPO >/dev/null 2>&1; then
          echo "Release $LATEST_TAG 已存在"
          exit 0
        fi
        
        # 获取release详细信息
        RELEASE_INFO=$(gh release view "$LATEST_TAG" --repo $UPSTREAM_REPO --json name,body,isDraft,isPrerelease)
        RELEASE_NAME=$(echo "$RELEASE_INFO" | jq -r '.name')
        IS_DRAFT=$(echo "$RELEASE_INFO" | jq -r '.isDraft')
        IS_PRERELEASE=$(echo "$RELEASE_INFO" | jq -r '.isPrerelease')
        
        # 保存body到文件以避免特殊字符问题
        echo "$RELEASE_INFO" | jq -r '.body' > /tmp/release_body.txt
        
        # 构建创建命令
        CREATE_CMD="gh release create '$LATEST_TAG' --repo '$FORK_REPO' --title '$RELEASE_NAME'"
        
        # 添加notes
        echo "🔄 **Auto-synced from upstream repository**" > /tmp/sync_body.txt
        echo "" >> /tmp/sync_body.txt
        cat /tmp/release_body.txt >> /tmp/sync_body.txt
        CREATE_CMD="$CREATE_CMD --notes-file /tmp/sync_body.txt"
        
        # 添加flags
        if [ "$IS_DRAFT" = "true" ]; then
          CREATE_CMD="$CREATE_CMD --draft"
        fi
        
        if [ "$IS_PRERELEASE" = "true" ]; then
          CREATE_CMD="$CREATE_CMD --prerelease"
        fi
        
        echo "创建release: $LATEST_TAG"
        eval $CREATE_CMD
        
        # 下载并上传assets
        echo "处理assets..."
        mkdir -p /tmp/assets
        cd /tmp/assets
        
        if gh release download "$LATEST_TAG" --repo $UPSTREAM_REPO 2>/dev/null; then
          if ls ./* >/dev/null 2>&1; then
            echo "上传assets..."
            gh release upload "$LATEST_TAG" ./* --repo $FORK_REPO
            echo "Assets上传完成"
          else
            echo "没有assets需要上传"
          fi
        else
          echo "没有assets可下载"
        fi
        
        echo "同步完成: $LATEST_TAG"
        
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
